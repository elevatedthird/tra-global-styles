////
/// Typography
/// @group frameworkComponents
////

// Heading styles, takes the $header-styles and prints extra properties foundation doesn't.
@mixin extend_typography() {
  $selector-prefix: '.';
  $include-tags: true;
  @each $size, $headers in $header-styles {
    @include breakpoint($size) {
      @each $header, $header-defs in $headers {
        $font-size-temp: 1rem;
        $selectors: #{$selector-prefix}#{$header};
        @if $include-tags {
          $selectors: #{$selector-prefix}#{$header} , #{$header}, #{$selector-prefix}#{$header} p, #{$header} p;
        }
        #{$selectors} {
          @if map-has-key($header-defs, color) {
            color: map-get($header-defs, color);
          }

          @if map-has-key($header-defs, letter-spacing) {
            letter-spacing: map-get($header-defs, letter-spacing);
          } @else if $size == $-zf-zero-breakpoint {
            letter-spacing: map-get($header-defs, letter-spacing);
          }

          @if map-has-key($header-defs, font-family) {
            font-family: map-get($header-defs, font-family);
          } @else if $size == $-zf-zero-breakpoint {
            font-family: map-get($header-defs, font-family);
          }

          @if map-has-key($header-defs, font-weight) {
            font-weight: map-get($header-defs, font-weight);
          } @else if $size == $-zf-zero-breakpoint {
            font-weight: map-get($header-defs, font-weight);
          }

          @if map-has-key($header-defs, font-size) {
            $font-size-temp: rem-calc(map-get($header-defs, font-size));
            font-size: $font-size-temp;
          } @else if map-has-key($header-defs, fs) {
            $font-size-temp: rem-calc(map-get($header-defs, fs));
            font-size: $font-size-temp;
          } @else if $size == $-zf-zero-breakpoint {
            font-size: $font-size-temp;
          }

          @if map-has-key($header-defs, line-height) {
            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);
          } @else if map-has-key($header-defs, lh) {
            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);
          } @else if $size == $-zf-zero-breakpoint {
            line-height: unitless-calc($header-lineheight, $font-size-temp);
          }
        }
      }
    }
  }
}

// replicates foundations typography generation and extension above but prints as silent classes.
@mixin silent_typography(){
  $selector-prefix: '%';
  $include-tags: false;
  @each $size, $headers in $header-styles {
    @include breakpoint($size) {
      @each $header, $header-defs in $headers {
        $font-size-temp: 1rem;
        $selectors: #{$selector-prefix}#{$header};
        @if $include-tags {
          $selectors: #{$selector-prefix}#{$header} , #{$header}, #{$selector-prefix}#{$header} p, #{$header} p;
        }
        #{$selectors} {

          @if map-has-key($header-defs, font-size) {
            $font-size-temp: rem-calc(map-get($header-defs, font-size));
            font-size: $font-size-temp;
          } @else if map-has-key($header-defs, fs) {
            $font-size-temp: rem-calc(map-get($header-defs, fs));
            font-size: $font-size-temp;
          } @else if $size == $-zf-zero-breakpoint {
            font-size: $font-size-temp;
          }

          @if map-has-key($header-defs, line-height) {
            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);
          } @else if map-has-key($header-defs, lh) {
            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);
          } @else if $size == $-zf-zero-breakpoint {
            line-height: unitless-calc($header-lineheight, $font-size-temp);
          }

          @if map-has-key($header-defs, margin-top) {
            margin-top: rem-calc(map-get($header-defs, margin-top));
          } @else if map-has-key($header-defs, mt) {
            margin-top: rem-calc(map-get($header-defs, mt));
          } @else if $size == $-zf-zero-breakpoint {
            margin-top: 0;
          }
          @if map-has-key($header-defs, margin-bottom) {
            margin-bottom: rem-calc(map-get($header-defs, margin-bottom));
          } @else if map-has-key($header-defs, mb) {
            margin-bottom: rem-calc(map-get($header-defs, mb));
          } @else if $size == $-zf-zero-breakpoint {
            margin-bottom: rem-calc($header-margin-bottom);
          }

          @if map-has-key($header-defs, color) {
            color: map-get($header-defs, color);
          }

          @if map-has-key($header-defs, letter-spacing) {
            letter-spacing: map-get($header-defs, letter-spacing);
          } @else if $size == $-zf-zero-breakpoint {
            letter-spacing: map-get($header-defs, letter-spacing);
          }

          @if map-has-key($header-defs, font-family) {
            font-family: map-get($header-defs, font-family);
          } @else if $size == $-zf-zero-breakpoint {
            font-family: map-get($header-defs, font-family);
          }

          @if map-has-key($header-defs, font-weight) {
            font-weight: map-get($header-defs, font-weight);
          } @else if $size == $-zf-zero-breakpoint {
            font-weight: map-get($header-defs, font-weight);
          }

        }
      }
    }
  }
}

/*
  Prints the color state for each tag presented or uses the default selectors
  See docroot/themes/custom/aries/source/00-config/settings/_typography.scss
 */
@mixin text-color-profile-targets($key: light) {
  $profile: extend-in-map($text-color-profiles, $key);
  @each $selector, $color in $profile {
    @if $selector == default {
      #{$default-text-color-profile-targets} {
        color: $color;
      }
    } @else {
      #{$selector} {
        color: $color;
      }
    }
  }
}
